rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Videos collection rules
    match /videos/{videoId} {
      allow read: if true;  // Anyone can read videos
      
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.userEmail == request.auth.token.email;
      
      allow update: if isOwner(resource.data.userId);
      allow delete: if isOwner(resource.data.userId);
    }

    // Video URLs collection rules
    match /video_urls/{urlId} {
      allow read: if true;  // Anyone can read URLs
      
      allow create: if isSignedIn() 
        && exists(/databases/$(database)/documents/videos/$(request.resource.data.videoId))
        && get(/databases/$(database)/documents/videos/$(request.resource.data.videoId)).data.userId == request.auth.uid;
      
      allow update: if isSignedIn() 
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['visits', 'lastAccessed']);
      
      allow delete: if isSignedIn() 
        && get(/databases/$(database)/documents/videos/$(resource.data.videoId)).data.userId == request.auth.uid;
    }

    // User profiles collection (if needed)
    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}