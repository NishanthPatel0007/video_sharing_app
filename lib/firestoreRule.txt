rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isValidVideo() {
      let data = request.resource.data;
      return data.title is string
        && data.title.size() >= 3
        && data.userId is string
        && data.thumbnailUrl is string
        && data.videoUrl is string
        && data.views is number
        && data.createdAt is timestamp
        && (data.originalUrl == null || data.originalUrl is string)
        && (data.hlsUrl == null || data.hlsUrl is string)
        && (data.metadata == null || data.metadata is map)
        && (data.playbackConfig == null || data.playbackConfig is map)
        && (data.processingStatus == null || data.processingStatus is string)
        && data.isProcessed is bool
        && data.primaryFormat is string
        && data.hasHLSStream is bool;
    }

    function isValidVideoUrl() {
      let data = request.resource.data;
      return data.videoId is string
        && data.shortCode is string
        && data.shortCode.matches('^[a-zA-Z2-9]{6}$')
        && data.visits is number
        && data.createdAt is timestamp
        && data.lastAccessed is timestamp;
    }

    match /videos/{videoId} {
      allow read: if true;
      
      allow create: if isSignedIn() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.userEmail == request.auth.token.email
        && isValidVideo();
      
      allow update: if 
        // Owner updates
        (isOwner(resource.data.userId)
          && isValidVideo()
          && request.resource.data.userId == resource.data.userId)
        ||
        // View count updates
        (isSignedIn() 
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['views', 'viewAnalytics', 'lastViewed'])
          && request.resource.data.views == resource.data.views + 1);

      allow delete: if isOwner(resource.data.userId);
    }

    match /video_urls/{urlId} {
      allow read: if true;
      
      allow create: if isSignedIn() 
        && exists(/databases/$(database)/documents/videos/$(request.resource.data.videoId))
        && get(/databases/$(database)/documents/videos/$(request.resource.data.videoId)).data.userId == request.auth.uid
        && isValidVideoUrl();
      
      allow update: if isSignedIn() 
        && (
          // View tracking updates
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['visits', 'lastAccessed', 'analytics'])
          ||
          // Format updates by owner
          (get(/databases/$(database)/documents/videos/$(resource.data.videoId)).data.userId == request.auth.uid
           && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['primaryFormat', 'hasHLSStream']))
        );
      
      allow delete: if isSignedIn() 
        && get(/databases/$(database)/documents/videos/$(resource.data.videoId)).data.userId == request.auth.uid;
    }

    match /video_analytics/{analyticId} {
      allow read: if isSignedIn()
        && get(/databases/$(database)/documents/videos/$(resource.data.videoId)).data.userId == request.auth.uid;
      
      allow create, update: if isSignedIn()
        && request.resource.data.userId == request.auth.uid;
    }

    match /processing_status/{statusId} {
      allow read, write: if isSignedIn()
        && resource.data.userId == request.auth.uid;
    }

    match /users/{userId} {
      allow read: if true;
      allow write: if isOwner(userId);
      
      match /private_data/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}